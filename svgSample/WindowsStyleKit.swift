//
//  WindowsStyleKit.swift
//  ProjectName
//
//  Created by  on 2016/09/16.
//  Copyright (c) 2016 . All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class WindowsStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfWindows: UIImage?
        static var windowsTargets: [AnyObject]?
        static var imageOfChrome: UIImage?
        static var chromeTargets: [AnyObject]?
        static var imageOfWindowsOld: UIImage?
        static var windowsOldTargets: [AnyObject]?
        static var imageOfWindowsNew: UIImage?
        static var windowsNewTargets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawWindows() {
        //// Color Declarations
        let fillColor = UIColor(red: 0.139, green: 0.508, blue: 0.755, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.951, green: 0.951, blue: 0.951, alpha: 1.000)

        //// windows.svg Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 250, height: 250))
        fillColor.setFill()
        ovalPath.fill()


        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 113.69, y: 120.37))
        bezierPath.addCurve(to: CGPoint(x: 113.69, y: 63.27), controlPoint1: CGPoint(x: 113.69, y: 101.33), controlPoint2: CGPoint(x: 113.69, y: 82.3))
        bezierPath.addCurve(to: CGPoint(x: 59, y: 72.51), controlPoint1: CGPoint(x: 94.16, y: 66.35), controlPoint2: CGPoint(x: 78.27, y: 69.43))
        bezierPath.addCurve(to: CGPoint(x: 59, y: 121.06), controlPoint1: CGPoint(x: 59, y: 91.93), controlPoint2: CGPoint(x: 59, y: 101.64))
        bezierPath.addCurve(to: CGPoint(x: 113.69, y: 120.37), controlPoint1: CGPoint(x: 78.27, y: 120.84), controlPoint2: CGPoint(x: 94.16, y: 120.6))
        bezierPath.close()
        bezierPath.miterLimit = 4;

        fillColor2.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 121.5, y: 120.26))
        bezier2Path.addCurve(to: CGPoint(x: 184, y: 119.56), controlPoint1: CGPoint(x: 141.03, y: 120.02), controlPoint2: CGPoint(x: 164.73, y: 119.8))
        bezier2Path.addCurve(to: CGPoint(x: 184, y: 52.52), controlPoint1: CGPoint(x: 184, y: 97.22), controlPoint2: CGPoint(x: 184, y: 74.87))
        bezier2Path.addCurve(to: CGPoint(x: 121.5, y: 61.77), controlPoint1: CGPoint(x: 164.73, y: 55.61), controlPoint2: CGPoint(x: 141.03, y: 58.68))
        bezier2Path.addCurve(to: CGPoint(x: 121.5, y: 120.26), controlPoint1: CGPoint(x: 121.5, y: 81.27), controlPoint2: CGPoint(x: 121.5, y: 100.76))
        bezier2Path.close()
        bezier2Path.miterLimit = 4;

        fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 122.28, y: 129.74))
        bezier3Path.addCurve(to: CGPoint(x: 122.28, y: 188.23), controlPoint1: CGPoint(x: 122.27, y: 149.24), controlPoint2: CGPoint(x: 122.28, y: 168.74))
        bezier3Path.addCurve(to: CGPoint(x: 184, y: 197.48), controlPoint1: CGPoint(x: 141.55, y: 191.32), controlPoint2: CGPoint(x: 164.73, y: 194.39))
        bezier3Path.addCurve(to: CGPoint(x: 184, y: 130.44), controlPoint1: CGPoint(x: 184, y: 175.13), controlPoint2: CGPoint(x: 184, y: 152.78))
        bezier3Path.addCurve(to: CGPoint(x: 122.28, y: 129.74), controlPoint1: CGPoint(x: 164.73, y: 130.21), controlPoint2: CGPoint(x: 141.55, y: 129.98))
        bezier3Path.close()
        bezier3Path.miterLimit = 4;

        fillColor2.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 113.69, y: 129.63))
        bezier4Path.addCurve(to: CGPoint(x: 59, y: 128.94), controlPoint1: CGPoint(x: 94.16, y: 129.4), controlPoint2: CGPoint(x: 78.27, y: 129.17))
        bezier4Path.addCurve(to: CGPoint(x: 59, y: 177.49), controlPoint1: CGPoint(x: 59, y: 148.36), controlPoint2: CGPoint(x: 59, y: 158.07))
        bezier4Path.addCurve(to: CGPoint(x: 113.69, y: 186.73), controlPoint1: CGPoint(x: 78.27, y: 180.57), controlPoint2: CGPoint(x: 94.16, y: 183.65))
        bezier4Path.addCurve(to: CGPoint(x: 113.69, y: 129.63), controlPoint1: CGPoint(x: 113.69, y: 167.7), controlPoint2: CGPoint(x: 113.69, y: 148.67))
        bezier4Path.close()
        bezier4Path.miterLimit = 4;

        fillColor2.setFill()
        bezier4Path.fill()
    }

    public class func drawChrome() {
        //// Color Declarations
        let fillColor3 = UIColor(red: 0.997, green: 1.000, blue: 0.000, alpha: 1.000)

        //// chrome.svg Group
        //// XMLID_16_
        //// XMLID_17_ Drawing
        let xMLID_17_Path = UIBezierPath(ovalIn: CGRect(x: 31.2, y: 31.5, width: 37.5, height: 37.2))
        fillColor3.setFill()
        xMLID_17_Path.fill()


        //// XMLID_18_ Drawing
        let xMLID_18_Path = UIBezierPath()
        xMLID_18_Path.move(to: CGPoint(x: 93.03, y: 25.35))
        xMLID_18_Path.addCurve(to: CGPoint(x: 93.02, y: 24.52), controlPoint1: CGPoint(x: 93.17, y: 25.09), controlPoint2: CGPoint(x: 93.17, y: 24.78))
        xMLID_18_Path.addCurve(to: CGPoint(x: 75.11, y: 6.77), controlPoint1: CGPoint(x: 88.67, y: 17.19), controlPoint2: CGPoint(x: 82.47, y: 11.06))
        xMLID_18_Path.addCurve(to: CGPoint(x: 50, y: 0.02), controlPoint1: CGPoint(x: 67.52, y: 2.35), controlPoint2: CGPoint(x: 58.83, y: 0.02))
        xMLID_18_Path.addCurve(to: CGPoint(x: 10.91, y: 18.84), controlPoint1: CGPoint(x: 34.71, y: 0.02), controlPoint2: CGPoint(x: 20.47, y: 6.88))
        xMLID_18_Path.addCurve(to: CGPoint(x: 10.84, y: 19.76), controlPoint1: CGPoint(x: 10.7, y: 19.1), controlPoint2: CGPoint(x: 10.67, y: 19.47))
        xMLID_18_Path.addLine(to: CGPoint(x: 24.92, y: 44.13))
        xMLID_18_Path.addCurve(to: CGPoint(x: 25.63, y: 44.54), controlPoint1: CGPoint(x: 25.07, y: 44.38), controlPoint2: CGPoint(x: 25.34, y: 44.54))
        xMLID_18_Path.addCurve(to: CGPoint(x: 25.74, y: 44.53), controlPoint1: CGPoint(x: 25.67, y: 44.54), controlPoint2: CGPoint(x: 25.7, y: 44.54))
        xMLID_18_Path.addCurve(to: CGPoint(x: 26.42, y: 43.92), controlPoint1: CGPoint(x: 26.07, y: 44.49), controlPoint2: CGPoint(x: 26.34, y: 44.25))
        xMLID_18_Path.addCurve(to: CGPoint(x: 50, y: 25.66), controlPoint1: CGPoint(x: 29.2, y: 33.17), controlPoint2: CGPoint(x: 38.89, y: 25.66))
        xMLID_18_Path.addCurve(to: CGPoint(x: 52.12, y: 25.76), controlPoint1: CGPoint(x: 50.69, y: 25.66), controlPoint2: CGPoint(x: 51.4, y: 25.7))
        xMLID_18_Path.addCurve(to: CGPoint(x: 52.19, y: 25.76), controlPoint1: CGPoint(x: 52.14, y: 25.76), controlPoint2: CGPoint(x: 52.16, y: 25.76))
        xMLID_18_Path.addLine(to: CGPoint(x: 92.31, y: 25.76))
        xMLID_18_Path.addCurve(to: CGPoint(x: 93.03, y: 25.35), controlPoint1: CGPoint(x: 92.61, y: 25.76), controlPoint2: CGPoint(x: 92.88, y: 25.6))
        xMLID_18_Path.close()
        xMLID_18_Path.miterLimit = 4;

        fillColor3.setFill()
        xMLID_18_Path.fill()


        //// XMLID_19_ Drawing
        let xMLID_19_Path = UIBezierPath()
        xMLID_19_Path.move(to: CGPoint(x: 57.39, y: 73.74))
        xMLID_19_Path.addCurve(to: CGPoint(x: 56.52, y: 73.46), controlPoint1: CGPoint(x: 57.18, y: 73.48), controlPoint2: CGPoint(x: 56.84, y: 73.37))
        xMLID_19_Path.addCurve(to: CGPoint(x: 50, y: 74.34), controlPoint1: CGPoint(x: 54.4, y: 74.05), controlPoint2: CGPoint(x: 52.21, y: 74.34))
        xMLID_19_Path.addCurve(to: CGPoint(x: 27.95, y: 60.32), controlPoint1: CGPoint(x: 40.61, y: 74.34), controlPoint2: CGPoint(x: 31.95, y: 68.84))
        xMLID_19_Path.addCurve(to: CGPoint(x: 27.92, y: 60.26), controlPoint1: CGPoint(x: 27.94, y: 60.3), controlPoint2: CGPoint(x: 27.93, y: 60.28))
        xMLID_19_Path.addLine(to: CGPoint(x: 7.84, y: 25.49))
        xMLID_19_Path.addCurve(to: CGPoint(x: 7.13, y: 25.08), controlPoint1: CGPoint(x: 7.69, y: 25.24), controlPoint2: CGPoint(x: 7.42, y: 25.08))
        xMLID_19_Path.addCurve(to: CGPoint(x: 7.13, y: 25.08), controlPoint1: CGPoint(x: 7.13, y: 25.08), controlPoint2: CGPoint(x: 7.13, y: 25.08))
        xMLID_19_Path.addCurve(to: CGPoint(x: 6.42, y: 25.5), controlPoint1: CGPoint(x: 6.83, y: 25.08), controlPoint2: CGPoint(x: 6.56, y: 25.24))
        xMLID_19_Path.addCurve(to: CGPoint(x: 0, y: 50), controlPoint1: CGPoint(x: 2.22, y: 32.94), controlPoint2: CGPoint(x: 0, y: 41.42))
        xMLID_19_Path.addCurve(to: CGPoint(x: 12.24, y: 82.77), controlPoint1: CGPoint(x: 0, y: 62.05), controlPoint2: CGPoint(x: 4.35, y: 73.69))
        xMLID_19_Path.addCurve(to: CGPoint(x: 42.54, y: 99.43), controlPoint1: CGPoint(x: 20.06, y: 91.76), controlPoint2: CGPoint(x: 30.82, y: 97.68))
        xMLID_19_Path.addCurve(to: CGPoint(x: 42.66, y: 99.44), controlPoint1: CGPoint(x: 42.58, y: 99.44), controlPoint2: CGPoint(x: 42.62, y: 99.44))
        xMLID_19_Path.addCurve(to: CGPoint(x: 43.37, y: 99.03), controlPoint1: CGPoint(x: 42.95, y: 99.44), controlPoint2: CGPoint(x: 43.22, y: 99.29))
        xMLID_19_Path.addLine(to: CGPoint(x: 57.45, y: 74.65))
        xMLID_19_Path.addCurve(to: CGPoint(x: 57.39, y: 73.74), controlPoint1: CGPoint(x: 57.62, y: 74.37), controlPoint2: CGPoint(x: 57.59, y: 74.01))
        xMLID_19_Path.close()
        xMLID_19_Path.miterLimit = 4;

        fillColor3.setFill()
        xMLID_19_Path.fill()


        //// XMLID_20_ Drawing
        let xMLID_20_Path = UIBezierPath()
        xMLID_20_Path.move(to: CGPoint(x: 95.8, y: 31.23))
        xMLID_20_Path.addLine(to: CGPoint(x: 67.61, y: 31.23))
        xMLID_20_Path.addCurve(to: CGPoint(x: 66.85, y: 31.74), controlPoint1: CGPoint(x: 67.27, y: 31.23), controlPoint2: CGPoint(x: 66.97, y: 31.43))
        xMLID_20_Path.addCurve(to: CGPoint(x: 67.03, y: 32.63), controlPoint1: CGPoint(x: 66.72, y: 32.05), controlPoint2: CGPoint(x: 66.8, y: 32.4))
        xMLID_20_Path.addCurve(to: CGPoint(x: 74.35, y: 50), controlPoint1: CGPoint(x: 71.75, y: 37.25), controlPoint2: CGPoint(x: 74.35, y: 43.42))
        xMLID_20_Path.addCurve(to: CGPoint(x: 70, y: 63.87), controlPoint1: CGPoint(x: 74.35, y: 54.99), controlPoint2: CGPoint(x: 72.84, y: 59.78))
        xMLID_20_Path.addCurve(to: CGPoint(x: 69.96, y: 63.93), controlPoint1: CGPoint(x: 69.99, y: 63.89), controlPoint2: CGPoint(x: 69.97, y: 63.91))
        xMLID_20_Path.addLine(to: CGPoint(x: 49.85, y: 98.75))
        xMLID_20_Path.addCurve(to: CGPoint(x: 49.85, y: 99.58), controlPoint1: CGPoint(x: 49.7, y: 99.01), controlPoint2: CGPoint(x: 49.7, y: 99.32))
        xMLID_20_Path.addCurve(to: CGPoint(x: 50.56, y: 99.98), controlPoint1: CGPoint(x: 50, y: 99.83), controlPoint2: CGPoint(x: 50.27, y: 99.98))
        xMLID_20_Path.addCurve(to: CGPoint(x: 50.57, y: 99.98), controlPoint1: CGPoint(x: 50.56, y: 99.98), controlPoint2: CGPoint(x: 50.56, y: 99.98))
        xMLID_20_Path.addCurve(to: CGPoint(x: 85.54, y: 85.16), controlPoint1: CGPoint(x: 63.8, y: 99.83), controlPoint2: CGPoint(x: 76.22, y: 94.57))
        xMLID_20_Path.addCurve(to: CGPoint(x: 100, y: 50), controlPoint1: CGPoint(x: 94.86, y: 75.74), controlPoint2: CGPoint(x: 100, y: 63.26))
        xMLID_20_Path.addCurve(to: CGPoint(x: 96.56, y: 31.75), controlPoint1: CGPoint(x: 100, y: 43.71), controlPoint2: CGPoint(x: 98.84, y: 37.56))
        xMLID_20_Path.addCurve(to: CGPoint(x: 95.8, y: 31.23), controlPoint1: CGPoint(x: 96.43, y: 31.43), controlPoint2: CGPoint(x: 96.13, y: 31.23))
        xMLID_20_Path.close()
        xMLID_20_Path.miterLimit = 4;

        fillColor3.setFill()
        xMLID_20_Path.fill()
    }

    public class func drawWindowsOld() {
        //// Color Declarations
        let color = UIColor(red: 0.087, green: 0.049, blue: 0.832, alpha: 1.000)

        //// Group
        //// Windows 2 Drawing
        let windows2Path = UIBezierPath()
        windows2Path.move(to: CGPoint(x: 20.41, y: 4.8))
        windows2Path.addCurve(to: CGPoint(x: 37.3, y: 0.44), controlPoint1: CGPoint(x: 26.71, y: 1.97), controlPoint2: CGPoint(x: 32.24, y: 0.55))
        windows2Path.addCurve(to: CGPoint(x: 44.84, y: 1.39), controlPoint1: CGPoint(x: 39.95, y: 0.44), controlPoint2: CGPoint(x: 42.46, y: 0.77))
        windows2Path.addCurve(to: CGPoint(x: 55.37, y: 6.71), controlPoint1: CGPoint(x: 48.46, y: 2.43), controlPoint2: CGPoint(x: 53.46, y: 5.48))
        windows2Path.addLine(to: CGPoint(x: 46.31, y: 41.44))
        windows2Path.addCurve(to: CGPoint(x: 28.59, y: 34.82), controlPoint1: CGPoint(x: 41.7, y: 38.13), controlPoint2: CGPoint(x: 36.13, y: 34.91))
        windows2Path.addLine(to: CGPoint(x: 28.59, y: 34.82))
        windows2Path.addCurve(to: CGPoint(x: 11.78, y: 38.8), controlPoint1: CGPoint(x: 23.56, y: 34.82), controlPoint2: CGPoint(x: 18.11, y: 36.13))
        windows2Path.addLine(to: CGPoint(x: 20.41, y: 4.8))
        windows2Path.close()
        windows2Path.move(to: CGPoint(x: 34.6, y: 88.11))
        windows2Path.addCurve(to: CGPoint(x: 43.82, y: 52.83), controlPoint1: CGPoint(x: 36.84, y: 79.58), controlPoint2: CGPoint(x: 42.22, y: 58.98))
        windows2Path.addCurve(to: CGPoint(x: 40.26, y: 50.49), controlPoint1: CGPoint(x: 42.66, y: 52.03), controlPoint2: CGPoint(x: 41.47, y: 51.23))
        windows2Path.addCurve(to: CGPoint(x: 26.79, y: 46.45), controlPoint1: CGPoint(x: 35.6, y: 47.81), controlPoint2: CGPoint(x: 31.07, y: 46.45))
        windows2Path.addCurve(to: CGPoint(x: 25.04, y: 46.53), controlPoint1: CGPoint(x: 26.21, y: 46.45), controlPoint2: CGPoint(x: 25.63, y: 46.47))
        windows2Path.addCurve(to: CGPoint(x: 11.39, y: 49.9), controlPoint1: CGPoint(x: 19.58, y: 47.03), controlPoint2: CGPoint(x: 14.6, y: 48.65))
        windows2Path.addCurve(to: CGPoint(x: 8.77, y: 51.03), controlPoint1: CGPoint(x: 10.54, y: 50.25), controlPoint2: CGPoint(x: 9.68, y: 50.62))
        windows2Path.addLine(to: CGPoint(x: 0, y: 85.11))
        windows2Path.addCurve(to: CGPoint(x: 16.24, y: 81.4), controlPoint1: CGPoint(x: 6.03, y: 82.61), controlPoint2: CGPoint(x: 11.36, y: 81.4))
        windows2Path.addCurve(to: CGPoint(x: 34.6, y: 88.11), controlPoint1: CGPoint(x: 24.14, y: 81.4), controlPoint2: CGPoint(x: 29.86, y: 84.7))
        windows2Path.close()
        windows2Path.move(to: CGPoint(x: 88.02, y: 62.7))
        windows2Path.addCurve(to: CGPoint(x: 71.66, y: 65.83), controlPoint1: CGPoint(x: 82.29, y: 64.78), controlPoint2: CGPoint(x: 76.8, y: 65.83))
        windows2Path.addCurve(to: CGPoint(x: 51.59, y: 59.15), controlPoint1: CGPoint(x: 62.29, y: 65.83), controlPoint2: CGPoint(x: 55.73, y: 62.42))
        windows2Path.addLine(to: CGPoint(x: 42.76, y: 93.54))
        windows2Path.addCurve(to: CGPoint(x: 60.95, y: 100.56), controlPoint1: CGPoint(x: 45.38, y: 95.22), controlPoint2: CGPoint(x: 54.2, y: 100.56))
        windows2Path.addCurve(to: CGPoint(x: 79.58, y: 95.76), controlPoint1: CGPoint(x: 66.4, y: 100.56), controlPoint2: CGPoint(x: 72.5, y: 98.99))
        windows2Path.addLine(to: CGPoint(x: 88.02, y: 62.7))
        windows2Path.close()
        windows2Path.move(to: CGPoint(x: 100, y: 16.14))
        windows2Path.addCurve(to: CGPoint(x: 83.3, y: 19.91), controlPoint1: CGPoint(x: 94.26, y: 18.64), controlPoint2: CGPoint(x: 88.65, y: 19.91))
        windows2Path.addCurve(to: CGPoint(x: 63.46, y: 13.09), controlPoint1: CGPoint(x: 74.34, y: 19.91), controlPoint2: CGPoint(x: 67.74, y: 16.43))
        windows2Path.addLine(to: CGPoint(x: 54.48, y: 47.92))
        windows2Path.addCurve(to: CGPoint(x: 73.83, y: 54.48), controlPoint1: CGPoint(x: 60.52, y: 52.27), controlPoint2: CGPoint(x: 67.01, y: 54.48))
        windows2Path.addCurve(to: CGPoint(x: 90.97, y: 50.02), controlPoint1: CGPoint(x: 79.39, y: 54.48), controlPoint2: CGPoint(x: 85.15, y: 52.98))
        windows2Path.addLine(to: CGPoint(x: 90.95, y: 49.78))
        windows2Path.addLine(to: CGPoint(x: 91.31, y: 49.68))
        windows2Path.addLine(to: CGPoint(x: 100, y: 16.14))
        windows2Path.close()
        windows2Path.miterLimit = 4;

        color.setFill()
        windows2Path.fill()
    }

    public class func drawWindowsNew() {
        //// Color Declarations
        let color2 = UIColor(red: 0.541, green: 0.782, blue: 0.000, alpha: 1.000)
        let color4 = UIColor(red: 0.801, green: 0.120, blue: 0.250, alpha: 1.000)

        //// XMLID_108_
        //// XMLID_109_ Drawing
        let xMLID_109_Path = UIBezierPath()
        xMLID_109_Path.move(to: CGPoint(x: 45.9, y: 8.45))
        xMLID_109_Path.addLine(to: CGPoint(x: 45.9, y: 46.72))
        xMLID_109_Path.addCurve(to: CGPoint(x: 46.72, y: 47.54), controlPoint1: CGPoint(x: 45.9, y: 47.17), controlPoint2: CGPoint(x: 46.27, y: 47.54))
        xMLID_109_Path.addLine(to: CGPoint(x: 99.17, y: 47.54))
        xMLID_109_Path.addCurve(to: CGPoint(x: 99.99, y: 46.72), controlPoint1: CGPoint(x: 99.62, y: 47.54), controlPoint2: CGPoint(x: 99.99, y: 47.17))
        xMLID_109_Path.addLine(to: CGPoint(x: 99.99, y: 0.82))
        xMLID_109_Path.addCurve(to: CGPoint(x: 99.7, y: 0.2), controlPoint1: CGPoint(x: 99.99, y: 0.58), controlPoint2: CGPoint(x: 99.88, y: 0.36))
        xMLID_109_Path.addCurve(to: CGPoint(x: 99.05, y: 0.01), controlPoint1: CGPoint(x: 99.52, y: 0.04), controlPoint2: CGPoint(x: 99.29, y: -0.03))
        xMLID_109_Path.addLine(to: CGPoint(x: 46.6, y: 7.64))
        xMLID_109_Path.addCurve(to: CGPoint(x: 45.9, y: 8.45), controlPoint1: CGPoint(x: 46.2, y: 7.7), controlPoint2: CGPoint(x: 45.9, y: 8.04))
        xMLID_109_Path.close()
        xMLID_109_Path.miterLimit = 4;

        color4.setFill()
        xMLID_109_Path.fill()


        //// XMLID_110_ Drawing
        let xMLID_110_Path = UIBezierPath()
        xMLID_110_Path.move(to: CGPoint(x: 40.16, y: 91.79))
        xMLID_110_Path.addCurve(to: CGPoint(x: 40.7, y: 91.58), controlPoint1: CGPoint(x: 40.36, y: 91.79), controlPoint2: CGPoint(x: 40.55, y: 91.72))
        xMLID_110_Path.addCurve(to: CGPoint(x: 40.98, y: 90.97), controlPoint1: CGPoint(x: 40.88, y: 91.43), controlPoint2: CGPoint(x: 40.98, y: 91.2))
        xMLID_110_Path.addLine(to: CGPoint(x: 40.98, y: 53.28))
        xMLID_110_Path.addCurve(to: CGPoint(x: 40.16, y: 52.46), controlPoint1: CGPoint(x: 40.98, y: 52.83), controlPoint2: CGPoint(x: 40.62, y: 52.46))
        xMLID_110_Path.addLine(to: CGPoint(x: 0.85, y: 52.46))
        xMLID_110_Path.addCurve(to: CGPoint(x: 0.27, y: 52.7), controlPoint1: CGPoint(x: 0.63, y: 52.46), controlPoint2: CGPoint(x: 0.42, y: 52.55))
        xMLID_110_Path.addCurve(to: CGPoint(x: 0.03, y: 53.28), controlPoint1: CGPoint(x: 0.12, y: 52.85), controlPoint2: CGPoint(x: 0.03, y: 53.06))
        xMLID_110_Path.addLine(to: CGPoint(x: 0.03, y: 85.58))
        xMLID_110_Path.addCurve(to: CGPoint(x: 0.74, y: 86.39), controlPoint1: CGPoint(x: 0.03, y: 85.99), controlPoint2: CGPoint(x: 0.33, y: 86.34))
        xMLID_110_Path.addLine(to: CGPoint(x: 40.05, y: 91.78))
        xMLID_110_Path.addCurve(to: CGPoint(x: 40.16, y: 91.79), controlPoint1: CGPoint(x: 40.09, y: 91.78), controlPoint2:
            CGPoint(x: 40.13, y: 91.79))
        xMLID_110_Path.close()
        xMLID_110_Path.miterLimit = 4;

        color4.setFill()
        xMLID_110_Path.fill()


        //// XMLID_138_ Drawing
        let xMLID_138_Path = UIBezierPath()
        xMLID_138_Path.move(to: CGPoint(x: 0.86, y: 47.54))
        xMLID_138_Path.addLine(to: CGPoint(x: 40.16, y: 47.54))
        xMLID_138_Path.addCurve(to: CGPoint(x: 40.98, y: 46.72), controlPoint1: CGPoint(x: 40.62, y: 47.54), controlPoint2: CGPoint(x: 40.98, y: 47.17))
        xMLID_138_Path.addLine(to: CGPoint(x: 40.98, y: 9.4))
        xMLID_138_Path.addCurve(to: CGPoint(x: 40.7, y: 8.79), controlPoint1: CGPoint(x: 40.98, y: 9.17), controlPoint2: CGPoint(x: 40.88, y: 8.94))
        xMLID_138_Path.addCurve(to: CGPoint(x: 40.05, y: 8.59), controlPoint1: CGPoint(x: 40.53, y: 8.63), controlPoint2: CGPoint(x: 40.29, y: 8.56))
        xMLID_138_Path.addLine(to: CGPoint(x: 0.71, y: 13.93))
        xMLID_138_Path.addCurve(to: CGPoint(x: -0, y: 14.75), controlPoint1: CGPoint(x: 0.3, y: 13.99), controlPoint2: CGPoint(x: -0, y: 14.34))
        xMLID_138_Path.addLine(to: CGPoint(x: 0.04, y: 46.72))
        xMLID_138_Path.addCurve(to: CGPoint(x: 0.86, y: 47.54), controlPoint1: CGPoint(x: 0.04, y: 47.17), controlPoint2: CGPoint(x: 0.4, y: 47.54))
        xMLID_138_Path.close()
        xMLID_138_Path.miterLimit = 4;

        color2.setFill()
        xMLID_138_Path.fill()


        //// XMLID_169_ Drawing
        let xMLID_169_Path = UIBezierPath()
        xMLID_169_Path.move(to: CGPoint(x: 99.17, y: 100))
        xMLID_169_Path.addCurve(to: CGPoint(x: 99.7, y: 99.8), controlPoint1: CGPoint(x: 99.36, y: 100), controlPoint2: CGPoint(x: 99.55, y: 99.93))
        xMLID_169_Path.addCurve(to: CGPoint(x: 99.99, y: 99.18), controlPoint1: CGPoint(x: 99.88, y: 99.64), controlPoint2: CGPoint(x: 99.99, y: 99.42))
        xMLID_169_Path.addLine(to: CGPoint(x: 100, y: 53.28))
        xMLID_169_Path.addCurve(to: CGPoint(x: 99.76, y: 52.7), controlPoint1: CGPoint(x: 100, y: 53.06), controlPoint2: CGPoint(x: 99.91, y: 52.85))
        xMLID_169_Path.addCurve(to: CGPoint(x: 99.18, y: 52.46), controlPoint1: CGPoint(x: 99.61, y: 52.55), controlPoint2: CGPoint(x: 99.4, y: 52.46))
        xMLID_169_Path.addLine(to: CGPoint(x: 46.72, y: 52.46))
        xMLID_169_Path.addCurve(to: CGPoint(x: 45.9, y: 53.28), controlPoint1: CGPoint(x: 46.27, y: 52.46), controlPoint2: CGPoint(x: 45.9, y: 52.83))
        xMLID_169_Path.addLine(to: CGPoint(x: 45.9, y: 91.8))
        xMLID_169_Path.addCurve(to: CGPoint(x: 46.61, y: 92.61), controlPoint1: CGPoint(x: 45.9, y: 92.21), controlPoint2: CGPoint(x: 46.2, y: 92.56))
        xMLID_169_Path.addLine(to: CGPoint(x: 99.05, y: 99.99))
        xMLID_169_Path.addCurve(to: CGPoint(x: 99.17, y: 100), controlPoint1: CGPoint(x: 99.09, y: 100), controlPoint2: CGPoint(x: 99.13, y: 100))
        xMLID_169_Path.close()
        xMLID_169_Path.miterLimit = 4;

        color2.setFill()
        xMLID_169_Path.fill()
    }

    //// Generated Images

    public class var imageOfWindows: UIImage {
        if Cache.imageOfWindows != nil {
            return Cache.imageOfWindows!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 250, height: 250), false, 0)
            WindowsStyleKit.drawWindows()

        Cache.imageOfWindows = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfWindows!
    }

    public class var imageOfChrome: UIImage {
        if Cache.imageOfChrome != nil {
            return Cache.imageOfChrome!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            WindowsStyleKit.drawChrome()

        Cache.imageOfChrome = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfChrome!
    }

    public class var imageOfWindowsOld: UIImage {
        if Cache.imageOfWindowsOld != nil {
            return Cache.imageOfWindowsOld!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            WindowsStyleKit.drawWindowsOld()

        Cache.imageOfWindowsOld = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfWindowsOld!
    }

    public class var imageOfWindowsNew: UIImage {
        if Cache.imageOfWindowsNew != nil {
            return Cache.imageOfWindowsNew!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            WindowsStyleKit.drawWindowsNew()

        Cache.imageOfWindowsNew = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfWindowsNew!
    }
    

}
